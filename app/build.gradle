import org.gradle.api.internal.tasks.DefaultTaskContainer

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

javafx {
    version = "14"
    modules = [ 'javafx.controls', 'javafx.fxml']
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    flatDir {
        dir 'build/libs'
    }

    maven {
        url "http://nexus.gluonhq.com/nexus/content/repositories/releases/"
        allowInsecureProtocol = true
    }
}


dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // javafx from maven central
    // https://mvnrepository.com/artifact/org.openjfx/javafx
    implementation 'org.openjfx:javafx:11'

    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation 'org.postgresql:postgresql:42.2.18'

    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation "org.mockito:mockito-inline:3.+"

    // To allow mockito annotations in Junit 5
    // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
    


    // https://mvnrepository.com/artifact/com.gluonhq/charm-down-core
    implementation 'com.gluonhq:charm-down-core:3.8.6'

    // https://mvnrepository.com/artifact/com.gluonhq/charm-glisten
    implementation group: 'com.gluonhq', name: 'charm-glisten', version: '5.0.1'

    //Thanks for using https://jar-download.com
    implementation group: 'net.java.openjfx.backport', name: 'openjfx-78-backport', version: '1.8.0-ea-b96.1'




    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources"
            }
        }
    }
}

shadowJar {
    manifest {
        attributes 'Main-Class': 'com.example.ApplicationKt'
    }
}



tasks.named("processResources") {
    duplicatesStrategy = 'exclude'
}

application {
    // Define the main class for the application.
    mainClass = 'ATM.App'
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    test.finalizedBy jacocoTestReport
}

 // tests are required to run before generating the report
 // can also just run the tests beforehand manually
jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['ATM/utils', 'ATM/view/*'])
        }))
    }
    reports {
        html.outputLocation = layout.buildDirectory.dir('JacocoHtmlReports')
    }

}


// generate javadocs
task genDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath
    destinationDir = file('docs/mainDocumentation')
}

task genTestDocs(type: Javadoc) {
    source = sourceSets.test.allJava
    classpath = sourceSets.test.compileClasspath
    destinationDir = file('docs/testDocumentation')
}
